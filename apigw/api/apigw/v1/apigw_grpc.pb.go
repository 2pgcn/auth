// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: apigw/v1/apigw.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Apigw_Register_FullMethodName      = "/apigw.v1.Apigw/Register"
	Apigw_Login_FullMethodName         = "/apigw.v1.Apigw/Login"
	Apigw_CreateArticle_FullMethodName = "/apigw.v1.Apigw/CreateArticle"
	Apigw_GetArticle_FullMethodName    = "/apigw.v1.Apigw/GetArticle"
	Apigw_ListArticle_FullMethodName   = "/apigw.v1.Apigw/ListArticle"
	Apigw_UpdateArticle_FullMethodName = "/apigw.v1.Apigw/UpdateArticle"
	Apigw_DeleteArticle_FullMethodName = "/apigw.v1.Apigw/DeleteArticle"
)

// ApigwClient is the client API for Apigw service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApigwClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ReturnTokenReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ReturnTokenReply, error)
	CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*CreateArticleReply, error)
	GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleReply, error)
	ListArticle(ctx context.Context, in *ListArticleRequest, opts ...grpc.CallOption) (*ListArticleReply, error)
	UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleReply, error)
	DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleReply, error)
}

type apigwClient struct {
	cc grpc.ClientConnInterface
}

func NewApigwClient(cc grpc.ClientConnInterface) ApigwClient {
	return &apigwClient{cc}
}

func (c *apigwClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*ReturnTokenReply, error) {
	out := new(ReturnTokenReply)
	err := c.cc.Invoke(ctx, Apigw_Register_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigwClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*ReturnTokenReply, error) {
	out := new(ReturnTokenReply)
	err := c.cc.Invoke(ctx, Apigw_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigwClient) CreateArticle(ctx context.Context, in *Article, opts ...grpc.CallOption) (*CreateArticleReply, error) {
	out := new(CreateArticleReply)
	err := c.cc.Invoke(ctx, Apigw_CreateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigwClient) GetArticle(ctx context.Context, in *GetArticleRequest, opts ...grpc.CallOption) (*GetArticleReply, error) {
	out := new(GetArticleReply)
	err := c.cc.Invoke(ctx, Apigw_GetArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigwClient) ListArticle(ctx context.Context, in *ListArticleRequest, opts ...grpc.CallOption) (*ListArticleReply, error) {
	out := new(ListArticleReply)
	err := c.cc.Invoke(ctx, Apigw_ListArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigwClient) UpdateArticle(ctx context.Context, in *UpdateArticleRequest, opts ...grpc.CallOption) (*UpdateArticleReply, error) {
	out := new(UpdateArticleReply)
	err := c.cc.Invoke(ctx, Apigw_UpdateArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apigwClient) DeleteArticle(ctx context.Context, in *DeleteArticleRequest, opts ...grpc.CallOption) (*DeleteArticleReply, error) {
	out := new(DeleteArticleReply)
	err := c.cc.Invoke(ctx, Apigw_DeleteArticle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApigwServer is the server API for Apigw service.
// All implementations must embed UnimplementedApigwServer
// for forward compatibility
type ApigwServer interface {
	Register(context.Context, *RegisterRequest) (*ReturnTokenReply, error)
	Login(context.Context, *LoginRequest) (*ReturnTokenReply, error)
	CreateArticle(context.Context, *Article) (*CreateArticleReply, error)
	GetArticle(context.Context, *GetArticleRequest) (*GetArticleReply, error)
	ListArticle(context.Context, *ListArticleRequest) (*ListArticleReply, error)
	UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error)
	DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error)
	mustEmbedUnimplementedApigwServer()
}

// UnimplementedApigwServer must be embedded to have forward compatible implementations.
type UnimplementedApigwServer struct {
}

func (UnimplementedApigwServer) Register(context.Context, *RegisterRequest) (*ReturnTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedApigwServer) Login(context.Context, *LoginRequest) (*ReturnTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedApigwServer) CreateArticle(context.Context, *Article) (*CreateArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateArticle not implemented")
}
func (UnimplementedApigwServer) GetArticle(context.Context, *GetArticleRequest) (*GetArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetArticle not implemented")
}
func (UnimplementedApigwServer) ListArticle(context.Context, *ListArticleRequest) (*ListArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListArticle not implemented")
}
func (UnimplementedApigwServer) UpdateArticle(context.Context, *UpdateArticleRequest) (*UpdateArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateArticle not implemented")
}
func (UnimplementedApigwServer) DeleteArticle(context.Context, *DeleteArticleRequest) (*DeleteArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteArticle not implemented")
}
func (UnimplementedApigwServer) mustEmbedUnimplementedApigwServer() {}

// UnsafeApigwServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApigwServer will
// result in compilation errors.
type UnsafeApigwServer interface {
	mustEmbedUnimplementedApigwServer()
}

func RegisterApigwServer(s grpc.ServiceRegistrar, srv ApigwServer) {
	s.RegisterService(&Apigw_ServiceDesc, srv)
}

func _Apigw_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigwServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apigw_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigwServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigw_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigwServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apigw_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigwServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigw_CreateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Article)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigwServer).CreateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apigw_CreateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigwServer).CreateArticle(ctx, req.(*Article))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigw_GetArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigwServer).GetArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apigw_GetArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigwServer).GetArticle(ctx, req.(*GetArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigw_ListArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigwServer).ListArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apigw_ListArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigwServer).ListArticle(ctx, req.(*ListArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigw_UpdateArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigwServer).UpdateArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apigw_UpdateArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigwServer).UpdateArticle(ctx, req.(*UpdateArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apigw_DeleteArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApigwServer).DeleteArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apigw_DeleteArticle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApigwServer).DeleteArticle(ctx, req.(*DeleteArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Apigw_ServiceDesc is the grpc.ServiceDesc for Apigw service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apigw_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apigw.v1.Apigw",
	HandlerType: (*ApigwServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Apigw_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Apigw_Login_Handler,
		},
		{
			MethodName: "CreateArticle",
			Handler:    _Apigw_CreateArticle_Handler,
		},
		{
			MethodName: "GetArticle",
			Handler:    _Apigw_GetArticle_Handler,
		},
		{
			MethodName: "ListArticle",
			Handler:    _Apigw_ListArticle_Handler,
		},
		{
			MethodName: "UpdateArticle",
			Handler:    _Apigw_UpdateArticle_Handler,
		},
		{
			MethodName: "DeleteArticle",
			Handler:    _Apigw_DeleteArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apigw/v1/apigw.proto",
}
